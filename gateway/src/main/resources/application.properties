spring.application.name=gateway

server.port=8084

#Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#Zipkin - In prod sample rate is reduced, since we don't need to trace every request -> it slows the system
management.tracing.sampling.probability=1.0
management.tracing.enabled=true

#Gateway
# id should be unique, any incoming request to id will go to uri.
# predicates are list of conditions that incoming req should meet to match this rout.
# each predicate will have pattern used for matching, if matched with pattern of api req ,
# it will be passed to the route

spring.cloud.gateway.server.webmvc.routes[0].id=company_service
spring.cloud.gateway.server.webmvc.routes[0].uri=lb://COMPANY-SERVICE
spring.cloud.gateway.server.webmvc.routes[0].predicates[0]=Path=/companies/**
#companies/1 etc works using wildcard ** - matches any seq of chars

# If there are multiple instances of a microservice running (e.g., JOB-SERVICE-DEV on port 9082),
# we need to balance the incoming traffic across these instances using load balancing.
# The 'lb://' prefix ensures that the Gateway routes the requests to available instances
# dynamically resolved via the Service Discovery mechanism (e.g., Eureka).
# Note: The correct service name (e.g., JOB-SERVICE-DEV) must match the name registered in the Service Registry.
# Only the instances with the same service name will be load-balanced. For example,
# If JOB-SERVICE-DEV has one instance on 9082 and another on 8082, load balancing will distribute traffic across these instances.
# If 9082 is JOB-SERVICE-DEV and 8082 is JOB-SERVICE, these will not share load balancing because they belong to different logical groups.
# we can mimic multiple instances by duplicating configuration of a ms and giving another port number by adding VM -Dserver.port=9082

spring.cloud.gateway.server.webmvc.routes[1].id=job_service
spring.cloud.gateway.server.webmvc.routes[1].uri=lb://JOB-SERVICE-DEV
spring.cloud.gateway.server.webmvc.routes[1].predicates[0]=Path=/jobs/**

spring.cloud.gateway.server.webmvc.routes[2].id=review_service
#spring.cloud.gateway.server.webmvc.routes[2].uri=http://localhost:8083
spring.cloud.gateway.server.webmvc.routes[2].uri=lb://REVIEW-SERVICE
spring.cloud.gateway.server.webmvc.routes[2].predicates[0]=Path=/reviews/**

spring.cloud.gateway.server.webmvc.routes[3].id=eureka-server
spring.cloud.gateway.server.webmvc.routes[3].uri=http://localhost:8761
spring.cloud.gateway.server.webmvc.routes[3].predicates[0]=Path=/eureka/main
spring.cloud.gateway.server.webmvc.routes[3].filters[0]=SetPath=/

# The incoming requests to /eureka/main will be routed to http://localhost:8761/
# The SetPath filter rewrites /eureka/main to / before forwarding to the backend server.
# The use of `/eureka/main` as the external path provides:
#  1. Logical organization: Groups Eureka-related requests under a specific endpoint.
#  2. Backend abstraction: Keeps internal backend paths (like /) hidden from clients.
#  3. Flexibility: Allows easy path remapping without disrupting client interactions.
#  4. Scalability: Useful in multi-environment setups (e.g., main, dev, staging)

#if static files are not shown in eureka UI(JS, CSS)
spring.cloud.gateway.server.webmvc.routes[4].id=eureka-server-static
spring.cloud.gateway.server.webmvc.routes[4].uri=http://localhost:8761
spring.cloud.gateway.server.webmvc.routes[4].predicates[0]=Path=/eureka/**


#logging
logging.level.root=info
logging.level.org.springframework.cloud.gatweway.route.RouteDefinitionLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE